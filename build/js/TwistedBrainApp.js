// Generated by Haxe 4.3.4
(function ($global) { "use strict";
Math.__name__ = true;
class Std {
	static string(s) {
		return js.Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
var domain = {};
domain.LandingPageData = class domain_LandingPageData {
	static getHeroSectionData() {
		return { headline : "AI + Human: The Future of DevOps", subtext : "Bridging code, AI agents, and human creativity to build, test, and scale with Haxe. Experience the next generation of development workflows where artificial intelligence amplifies human potential.", primaryCta : { text : "Get Started", url : "#features", style : "primary-neon"}, secondaryCta : { text : "View on GitHub", url : "https://github.com/twisted-brain/tb-pages", style : "secondary-outline"}, backgroundStyle : "circuit-neon", logoLeft : "assets/tb.png", logoRight : "assets/hdevm.png"};
	}
	static getAboutSectionData() {
		return { tagline : "We are developers shaping the future with Haxe and AI.", description : "Twisted Brain pioneers AI-assisted development for multi-target Haxe projects. Our platform enables seamless human-AI collaboration in DevOps cycles: code → test → validate → deploy. We focus on simplicity, automation, and creativity, empowering developers to build once and deploy everywhere while maintaining the human touch that makes software truly exceptional.", logo : "assets/tb_3.png", additionalAssets : ["assets/tb_4.png","assets/tb_5.png"]};
	}
	static getFeaturesSectionData() {
		return [{ title : "AI DevOps Pipeline", description : "Automates repetitive coding and testing tasks with intelligent agents that learn from your patterns and preferences.", icon : "circuit-brain", iconColor : "cyan-magenta"},{ title : "Multi-Target Haxe Development", description : "Compile once, run everywhere. Deploy to JavaScript, C++, Java, PHP, Lua, and more from a single codebase.", icon : "haxe-x", iconColor : "orange-glow"},{ title : "Human + AI Collaboration", description : "AI proposes solutions, humans refine and perfect them. Balance efficiency with creativity for optimal results.", icon : "brain-split", iconColor : "purple-cyan"}];
	}
	static getShowcaseSectionData() {
		return { title : "See Haxe in Action", description : "Experience the power of cross-platform development with real examples.", mockups : [{ platform : "Web", image : "assets/mockup-web.svg", description : "Responsive web applications"},{ platform : "Mobile", image : "assets/mockup-mobile.svg", description : "Native mobile experiences"},{ platform : "Desktop", image : "assets/mockup-desktop.svg", description : "Cross-platform desktop apps"}], codeCycle : { steps : ["Code","Test","Fix","Deploy","Repeat"], description : "AI-assisted development cycle"}};
	}
	static getCommunitySectionData() {
		return { statement : "Twisted Brain is open-source, transparent, and community-driven.", description : "Join our growing community of developers pushing the boundaries of AI-assisted development.", primaryCta : { text : "Contribute on GitHub", url : "https://github.com/twisted-brain", style : "primary-neon"}, socialLinks : [{ platform : "GitHub", url : "https://github.com/twisted-brain", icon : "github"},{ platform : "Documentation", url : "#docs", icon : "docs"}]};
	}
	static getFooterSectionData() {
		return { logo : "assets/tb.png", devOpsLogo : "assets/hdevm_1.png", links : [{ category : "Project", items : [{ text : "GitHub", url : "https://github.com/twisted-brain/tb-pages"},{ text : "Documentation", url : "#docs"},{ text : "Roadmap", url : "#roadmap"}]},{ category : "Community", items : [{ text : "Contribute", url : "https://github.com/twisted-brain/tb-pages/contribute"},{ text : "Issues", url : "https://github.com/twisted-brain/tb-pages/issues"},{ text : "Contact", url : "#contact"}]}], copyright : "© 2024 Twisted Brain. Open source under MIT License.", haxeCredit : "Built with Haxe - The Cross-Platform Toolkit"};
	}
}
domain.LandingPageData.__name__ = true;
domain.LandingPageService = class domain_LandingPageService {
	constructor() {
	}
	getPageConfiguration() {
		return { hero : domain.LandingPageData.getHeroSectionData(), about : domain.LandingPageData.getAboutSectionData(), features : domain.LandingPageData.getFeaturesSectionData(), showcase : domain.LandingPageData.getShowcaseSectionData(), community : domain.LandingPageData.getCommunitySectionData(), footer : domain.LandingPageData.getFooterSectionData(), theme : this.getThemeConfiguration(), metadata : this.getPageMetadata()};
	}
	getThemeConfiguration() {
		return { colorPalette : { primary : { cyan : "#00FFFF", magenta : "#FF00FF", orange : "#FF8C00", blue : "#0080FF"}, background : { dark : "#0A0A0A", darkGray : "#1A1A1A", mediumGray : "#2A2A2A"}, accent : { neonGlow : "rgba(0, 255, 255, 0.8)", purpleGlow : "rgba(255, 0, 255, 0.6)", orangeGlow : "rgba(255, 140, 0, 0.7)"}}, typography : { headingFont : "'Orbitron', monospace", bodyFont : "'Inter', sans-serif", codeFont : "'Fira Code', monospace"}, effects : { glowIntensity : "0 0 20px", pulseAnimation : "pulse 2s ease-in-out infinite alternate", circuitAnimation : "circuit-flow 10s linear infinite"}};
	}
	getPageMetadata() {
		return { title : "Twisted Brain - AI + Human DevOps with Haxe", description : "Experience the future of DevOps with AI-assisted Haxe development. Build once, deploy everywhere with intelligent automation and human creativity.", keywords : ["Haxe","AI","DevOps","Cross-platform","Development","Automation","Neon","Futuristic"], author : "Twisted Brain Team", ogImage : "assets/tb_3.png", twitterCard : "summary_large_image", canonicalUrl : "https://twisted-brain.github.io/tb-pages/", language : "en-US"};
	}
	validateSectionConfiguration(sectionType) {
		let issues = [];
		switch(sectionType) {
		case "community":
			let communityData = domain.LandingPageData.getCommunitySectionData();
			if(communityData.primaryCta == null || communityData.primaryCta.url == null) {
				issues.push("Community CTA URL is required");
			}
			break;
		case "features":
			let featuresData = domain.LandingPageData.getFeaturesSectionData();
			if(featuresData.length != 3) {
				issues.push("Features section must have exactly 3 features");
			}
			let _g = 0;
			while(_g < featuresData.length) {
				let feature = featuresData[_g];
				++_g;
				if(feature.title == null || feature.title.length == 0) {
					issues.push("Feature title is required");
				}
			}
			break;
		case "hero":
			let heroData = domain.LandingPageData.getHeroSectionData();
			if(heroData.headline == null || heroData.headline.length == 0) {
				issues.push("Hero headline is required");
			}
			if(heroData.primaryCta == null || heroData.primaryCta.text == null) {
				issues.push("Hero primary CTA is required");
			}
			break;
		default:
			issues.push("Unknown section type: " + sectionType);
		}
		return { isValid : issues.length == 0, issues : issues};
	}
	getCriticalAssetPaths() {
		let assets = [];
		let heroData = domain.LandingPageData.getHeroSectionData();
		assets.push(heroData.logoLeft);
		assets.push(heroData.logoRight);
		let aboutData = domain.LandingPageData.getAboutSectionData();
		assets.push(aboutData.logo);
		let footerData = domain.LandingPageData.getFooterSectionData();
		assets.push(footerData.logo);
		assets.push(footerData.devOpsLogo);
		return assets;
	}
	getNavigationStructure() {
		return { sections : [{ id : "hero", label : "Home", order : 1},{ id : "about", label : "About", order : 2},{ id : "features", label : "Features", order : 3},{ id : "showcase", label : "Showcase", order : 4},{ id : "community", label : "Community", order : 5}], scrollBehavior : "smooth", offsetTop : 80};
	}
}
domain.LandingPageService.__name__ = true;
Object.assign(domain.LandingPageService.prototype, {
	__class__: domain.LandingPageService
});
var haxe = {};
haxe.IMap = class haxe_IMap {
}
haxe.IMap.__name__ = true;
haxe.IMap.__isInterface__ = true;
haxe.Exception = class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe.Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe.ValueException(value);
			return e;
		}
	}
}
haxe.Exception.__name__ = true;
haxe.Exception.__super__ = Error;
Object.assign(haxe.Exception.prototype, {
	__class__: haxe.Exception
});
haxe.ValueException = class haxe_ValueException extends haxe.Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
}
haxe.ValueException.__name__ = true;
haxe.ValueException.__super__ = haxe.Exception;
Object.assign(haxe.ValueException.prototype, {
	__class__: haxe.ValueException
});
haxe.ds = {};
haxe.ds.StringMap = class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe.ds.StringMap.__name__ = true;
haxe.ds.StringMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.StringMap.prototype, {
	__class__: haxe.ds.StringMap
});
haxe.iterators = {};
haxe.iterators.ArrayIterator = class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe.iterators.ArrayIterator.__name__ = true;
Object.assign(haxe.iterators.ArrayIterator.prototype, {
	__class__: haxe.iterators.ArrayIterator
});
var js = {};
js.Boot = class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js.Boot.__nativeClassName(o);
			if(name != null) {
				return js.Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js.Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js.Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = _g++;
					let i1 = intf[i];
					if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js.Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js.Boot.__interfLoop(js.Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js.Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe.Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js.Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js.Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js.Boot.__name__ = true;
var platform = {};
platform.js = {};
platform.js.TwistedBrainApp = class platform_js_TwistedBrainApp {
	constructor() {
		this.isInitialized = false;
		this.landingPageService = new domain.LandingPageService();
		this.assetManager = shared.AssetManager.getInstance();
	}
	initialize() {
		if(this.isInitialized) {
			return;
		}
		console.log("platform/js/TwistedBrainApp.hx:46:","Initializing Twisted Brain Landing Page...");
		if(window.document.readyState == "loading") {
			window.document.addEventListener("DOMContentLoaded",$bind(this,this.onDOMReady));
		} else {
			this.onDOMReady();
		}
	}
	onDOMReady() {
		this.pageConfiguration = this.landingPageService.getPageConfiguration();
		let criticalAssets = this.landingPageService.getCriticalAssetPaths();
		this.assetManager.preloadAssets(criticalAssets,$bind(this,this.onAssetsLoaded),$bind(this,this.onAssetLoadProgress));
	}
	onAssetLoadProgress(loaded,total) {
		let progress = Math.round(loaded / total * 100);
		console.log("platform/js/TwistedBrainApp.hx:77:","Asset loading progress: " + progress + "% (" + loaded + "/" + total + ")");
		let loadingIndicator = window.document.getElementById("loading-progress");
		if(loadingIndicator != null) {
			loadingIndicator.textContent = "Loading assets... " + progress + "%";
		}
	}
	onAssetsLoaded() {
		console.log("platform/js/TwistedBrainApp.hx:90:","Critical assets loaded. Rendering page...");
		let loadingIndicator = window.document.getElementById("loading-indicator");
		if(loadingIndicator != null) {
			loadingIndicator.style.display = "none";
		}
		this.renderPage();
		this.initializeInteractions();
		this.isInitialized = true;
		console.log("platform/js/TwistedBrainApp.hx:107:","Twisted Brain Landing Page initialized successfully!");
	}
	renderPage() {
		let body = window.document.body;
		let loadingIndicator = window.document.getElementById("loading-indicator");
		body.innerHTML = "";
		if(loadingIndicator != null) {
			body.appendChild(loadingIndicator);
		}
		let mainContainer = window.document.createElement("div");
		mainContainer.id = "twisted-brain-app";
		mainContainer.className = "app-container";
		mainContainer.appendChild(this.renderHeroSection());
		mainContainer.appendChild(this.renderAboutSection());
		mainContainer.appendChild(this.renderFeaturesSection());
		mainContainer.appendChild(this.renderShowcaseSection());
		mainContainer.appendChild(this.renderCommunitySection());
		mainContainer.appendChild(this.renderFooterSection());
		body.appendChild(mainContainer);
		this.applyThemeStyles();
	}
	renderHeroSection() {
		let heroData = this.pageConfiguration.hero;
		let section = window.document.createElement("section");
		section.id = "hero";
		section.className = "hero-section neon-background";
		section.innerHTML = "\n            <div class=\"hero-container\">\n                <div class=\"hero-content\">\n                    <div class=\"hero-logos\">\n                        <img src=\"" + heroData.logoLeft + "\" alt=\"Twisted Brain Logo\" class=\"logo-left neon-glow-cyan\" />\n                        <img src=\"" + heroData.logoRight + "\" alt=\"Haxe DevOps Logo\" class=\"logo-right neon-glow-orange\" />\n                    </div>\n                    <h1 class=\"hero-headline neon-text-cyan\">" + heroData.headline + "</h1>\n                    <p class=\"hero-subtext\">" + heroData.subtext + "</p>\n                    <div class=\"hero-ctas\">\n                        <a href=\"" + heroData.primaryCta.url + "\" class=\"cta-button " + heroData.primaryCta.style + "\">\n                            " + heroData.primaryCta.text + "\n                        </a>\n                        <a href=\"" + heroData.secondaryCta.url + "\" class=\"cta-button " + heroData.secondaryCta.style + "\" target=\"_blank\">\n                            " + heroData.secondaryCta.text + "\n                        </a>\n                    </div>\n                </div>\n                <div class=\"hero-background\">\n                    <svg class=\"circuit-lines\" viewBox=\"0 0 1200 800\">\n                        <path class=\"circuit-path cyan\" d=\"M0,400 Q300,200 600,400 T1200,400\" />\n                        <path class=\"circuit-path magenta\" d=\"M0,300 Q400,100 800,300 T1200,300\" />\n                        <path class=\"circuit-path orange\" d=\"M0,500 Q200,700 400,500 T800,500 Q1000,300 1200,500\" />\n                    </svg>\n                </div>\n            </div>\n        ";
		return section;
	}
	renderAboutSection() {
		let aboutData = this.pageConfiguration.about;
		let section = window.document.createElement("section");
		section.id = "about";
		section.className = "about-section";
		section.innerHTML = "\n            <div class=\"section-container\">\n                <div class=\"about-content\">\n                    <div class=\"about-logo\">\n                        <img src=\"" + aboutData.logo + "\" alt=\"Twisted Brain\" class=\"neon-glow-magenta\" />\n                    </div>\n                    <div class=\"about-text\">\n                        <h2 class=\"section-tagline neon-text-magenta\">" + aboutData.tagline + "</h2>\n                        <p class=\"about-description\">" + aboutData.description + "</p>\n                    </div>\n                </div>\n            </div>\n        ";
		return section;
	}
	renderFeaturesSection() {
		let featuresData = this.pageConfiguration.features;
		let section = window.document.createElement("section");
		section.id = "features";
		section.className = "features-section";
		let featuresHtml = "<div class=\"section-container\"><h2 class=\"section-title neon-text-orange\">Key Features</h2><div class=\"features-grid\">";
		let _g = 0;
		while(_g < featuresData.length) {
			let feature = featuresData[_g];
			++_g;
			featuresHtml += "\n                <div class=\"feature-card neon-border-" + feature.iconColor + "\">\n                    <div class=\"feature-icon " + feature.icon + " " + feature.iconColor + "\"></div>\n                    <h3 class=\"feature-title\">" + feature.title + "</h3>\n                    <p class=\"feature-description\">" + feature.description + "</p>\n                </div>\n            ";
		}
		featuresHtml += "</div></div>";
		section.innerHTML = featuresHtml;
		return section;
	}
	renderShowcaseSection() {
		let showcaseData = this.pageConfiguration.showcase;
		let section = window.document.createElement("section");
		section.id = "showcase";
		section.className = "showcase-section";
		let mockupsHtml = "";
		let _g = 0;
		let _g1 = showcaseData.mockups;
		while(_g < _g1.length) {
			let mockup = _g1[_g];
			++_g;
			mockupsHtml += "\n                <div class=\"mockup-item\">\n                    <div class=\"mockup-image neon-glow-blue\">\n                        <div class=\"mockup-placeholder\">" + mockup.platform + "</div>\n                    </div>\n                    <p class=\"mockup-description\">" + mockup.description + "</p>\n                </div>\n            ";
		}
		let cycleStepsHtml = "";
		let _g2 = 0;
		let _g3 = showcaseData.codeCycle.steps.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let step = showcaseData.codeCycle.steps[i];
			let isLast = i == showcaseData.codeCycle.steps.length - 1;
			cycleStepsHtml += "\n                <div class=\"cycle-step\">\n                    <span class=\"step-text neon-text-cyan\">" + step + "</span>\n                    " + (!isLast ? "<div class=\"step-arrow\">→</div>" : "") + "\n                </div>\n            ";
		}
		section.innerHTML = "\n            <div class=\"section-container\">\n                <h2 class=\"section-title neon-text-blue\">" + showcaseData.title + "</h2>\n                <p class=\"section-description\">" + showcaseData.description + "</p>\n                \n                <div class=\"mockups-container\">\n                    " + mockupsHtml + "\n                </div>\n                \n                <div class=\"code-cycle\">\n                    <h3 class=\"cycle-title\">" + showcaseData.codeCycle.description + "</h3>\n                    <div class=\"cycle-steps\">\n                        " + cycleStepsHtml + "\n                    </div>\n                </div>\n            </div>\n        ";
		return section;
	}
	renderCommunitySection() {
		let communityData = this.pageConfiguration.community;
		let section = window.document.createElement("section");
		section.id = "community";
		section.className = "community-section";
		let socialLinksHtml = "";
		let _g = 0;
		let _g1 = communityData.socialLinks;
		while(_g < _g1.length) {
			let link = _g1[_g];
			++_g;
			socialLinksHtml += "\n                <a href=\"" + link.url + "\" class=\"social-link neon-glow-cyan\" target=\"_blank\">\n                    <span class=\"social-icon " + link.icon + "\"></span>\n                    <span class=\"social-text\">" + link.platform + "</span>\n                </a>\n            ";
		}
		section.innerHTML = "\n            <div class=\"section-container\">\n                <h2 class=\"community-statement neon-text-magenta\">" + communityData.statement + "</h2>\n                <p class=\"community-description\">" + communityData.description + "</p>\n                \n                <div class=\"community-actions\">\n                    <a href=\"" + communityData.primaryCta.url + "\" class=\"cta-button " + communityData.primaryCta.style + "\" target=\"_blank\">\n                        " + communityData.primaryCta.text + "\n                    </a>\n                </div>\n                \n                <div class=\"social-links\">\n                    " + socialLinksHtml + "\n                </div>\n            </div>\n        ";
		return section;
	}
	renderFooterSection() {
		let footerData = this.pageConfiguration.footer;
		let section = window.document.createElement("footer");
		section.id = "footer";
		section.className = "footer-section neon-border-top";
		let linksHtml = "";
		let _g = 0;
		let _g1 = footerData.links;
		while(_g < _g1.length) {
			let category = _g1[_g];
			++_g;
			linksHtml += "<div class=\"link-category\">";
			linksHtml += "<h4 class=\"category-title neon-text-cyan\">" + category.category + "</h4>";
			linksHtml += "<ul class=\"category-links\">";
			let _g2 = 0;
			let _g3 = category.items;
			while(_g2 < _g3.length) {
				let link = _g3[_g2];
				++_g2;
				linksHtml += "<li><a href=\"" + link.url + "\" class=\"footer-link\">" + link.text + "</a></li>";
			}
			linksHtml += "</ul></div>";
		}
		section.innerHTML = "\n            <div class=\"footer-container\">\n                <div class=\"footer-content\">\n                    <div class=\"footer-branding\">\n                        <img src=\"" + footerData.logo + "\" alt=\"Twisted Brain\" class=\"footer-logo neon-glow-magenta\" />\n                        <img src=\"" + footerData.devOpsLogo + "\" alt=\"Haxe DevOps\" class=\"devops-logo neon-glow-orange\" />\n                    </div>\n                    \n                    <div class=\"footer-links\">\n                        " + linksHtml + "\n                    </div>\n                </div>\n                \n                <div class=\"footer-bottom\">\n                    <p class=\"copyright\">" + footerData.copyright + "</p>\n                    <p class=\"haxe-credit neon-text-orange\">" + footerData.haxeCredit + "</p>\n                </div>\n            </div>\n        ";
		return section;
	}
	applyThemeStyles() {
		let theme = this.pageConfiguration.theme;
		let styleElement = window.document.createElement("style");
		styleElement.textContent = this.generateThemeCSS(theme);
		window.document.head.appendChild(styleElement);
	}
	generateThemeCSS(theme) {
		return "\n            /* Twisted Brain Landing Page Styles */\n            @import url(\"https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600&family=Fira+Code:wght@300;400;500&display=swap\");\n            \n            :root {\n                --color-cyan: " + theme.colorPalette.primary.cyan + ";\n                --color-magenta: " + theme.colorPalette.primary.magenta + ";\n                --color-orange: " + theme.colorPalette.primary.orange + ";\n                --color-blue: " + theme.colorPalette.primary.blue + ";\n                --color-dark: " + theme.colorPalette.background.dark + ";\n                --color-dark-gray: " + theme.colorPalette.background.darkGray + ";\n                --color-medium-gray: " + theme.colorPalette.background.mediumGray + ";\n                --glow-cyan: " + theme.colorPalette.accent.neonGlow + ";\n                --glow-purple: " + theme.colorPalette.accent.purpleGlow + ";\n                --glow-orange: " + theme.colorPalette.accent.orangeGlow + ";\n                --font-heading: " + theme.typography.headingFont + ";\n                --font-body: " + theme.typography.bodyFont + ";\n                --font-code: " + theme.typography.codeFont + ";\n            }\n            \n            * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n            }\n            \n            body {\n                font-family: var(--font-body);\n                background: var(--color-dark);\n                color: #ffffff;\n                line-height: 1.6;\n                overflow-x: hidden;\n            }\n            \n            .app-container {\n                min-height: 100vh;\n            }\n            \n            /* Neon text effects */\n            .neon-text-cyan {\n                color: var(--color-cyan);\n                text-shadow: 0 0 10px var(--glow-cyan), 0 0 20px var(--glow-cyan);\n            }\n            \n            .neon-text-magenta {\n                color: var(--color-magenta);\n                text-shadow: 0 0 10px var(--glow-purple), 0 0 20px var(--glow-purple);\n            }\n            \n            .neon-text-orange {\n                color: var(--color-orange);\n                text-shadow: 0 0 10px var(--glow-orange), 0 0 20px var(--glow-orange);\n            }\n            \n            .neon-text-blue {\n                color: var(--color-blue);\n                text-shadow: 0 0 10px var(--color-blue), 0 0 20px var(--color-blue);\n            }\n            \n            /* Neon glow effects */\n            .neon-glow-cyan {\n                box-shadow: 0 0 15px var(--glow-cyan), 0 0 25px var(--glow-cyan);\n            }\n            \n            .neon-glow-magenta {\n                box-shadow: 0 0 15px var(--glow-purple), 0 0 25px var(--glow-purple);\n            }\n            \n            .neon-glow-orange {\n                box-shadow: 0 0 15px var(--glow-orange), 0 0 25px var(--glow-orange);\n            }\n            \n            .neon-glow-blue {\n                box-shadow: 0 0 15px var(--color-blue), 0 0 25px var(--color-blue);\n            }\n            \n            /* Hero Section */\n            .hero-section {\n                min-height: 100vh;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                position: relative;\n                background: linear-gradient(135deg, var(--color-dark) 0%, var(--color-dark-gray) 100%);\n            }\n            \n            .hero-container {\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 2rem;\n                text-align: center;\n                position: relative;\n                z-index: 2;\n            }\n            \n            .hero-logos {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                gap: 4rem;\n                margin-bottom: 3rem;\n            }\n            \n            .logo-left, .logo-right {\n                height: 120px;\n                width: auto;\n                transition: transform 0.3s ease;\n            }\n            \n            .logo-left:hover, .logo-right:hover {\n                transform: scale(1.1);\n            }\n            \n            .hero-headline {\n                font-family: var(--font-heading);\n                font-size: 4rem;\n                font-weight: 900;\n                margin-bottom: 1.5rem;\n                animation: " + theme.effects.pulseAnimation + ";\n            }\n            \n            .hero-subtext {\n                font-size: 1.25rem;\n                max-width: 800px;\n                margin: 0 auto 3rem;\n                color: #cccccc;\n                line-height: 1.8;\n            }\n            \n            .hero-ctas {\n                display: flex;\n                gap: 2rem;\n                justify-content: center;\n                flex-wrap: wrap;\n            }\n            \n            /* CTA Buttons */\n            .cta-button {\n                display: inline-block;\n                padding: 1rem 2.5rem;\n                font-family: var(--font-heading);\n                font-weight: 700;\n                text-decoration: none;\n                border-radius: 8px;\n                transition: all 0.3s ease;\n                text-transform: uppercase;\n                letter-spacing: 1px;\n            }\n            \n            .primary-neon {\n                background: linear-gradient(45deg, var(--color-cyan), var(--color-blue));\n                color: var(--color-dark);\n                box-shadow: 0 0 20px var(--glow-cyan);\n            }\n            \n            .primary-neon:hover {\n                transform: translateY(-2px);\n                box-shadow: 0 0 30px var(--glow-cyan), 0 5px 15px rgba(0, 255, 255, 0.3);\n            }\n            \n            .secondary-outline {\n                background: transparent;\n                color: var(--color-cyan);\n                border: 2px solid var(--color-cyan);\n                box-shadow: 0 0 15px var(--glow-cyan);\n            }\n            \n            .secondary-outline:hover {\n                background: var(--glow-cyan);\n                color: var(--color-dark);\n                transform: translateY(-2px);\n            }\n            \n            /* Circuit Background */\n            .hero-background {\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                z-index: 1;\n                opacity: 0.3;\n            }\n            \n            .circuit-lines {\n                width: 100%;\n                height: 100%;\n            }\n            \n            .circuit-path {\n                fill: none;\n                stroke-width: 2;\n                animation: " + theme.effects.circuitAnimation + ";\n            }\n            \n            .circuit-path.cyan {\n                stroke: var(--color-cyan);\n                filter: drop-shadow(0 0 5px var(--glow-cyan));\n            }\n            \n            .circuit-path.magenta {\n                stroke: var(--color-magenta);\n                filter: drop-shadow(0 0 5px var(--glow-purple));\n            }\n            \n            .circuit-path.orange {\n                stroke: var(--color-orange);\n                filter: drop-shadow(0 0 5px var(--glow-orange));\n            }\n            \n            /* Section Containers */\n            .section-container {\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 5rem 2rem;\n            }\n            \n            .section-title {\n                font-family: var(--font-heading);\n                font-size: 3rem;\n                text-align: center;\n                margin-bottom: 3rem;\n            }\n            \n            .section-description {\n                font-size: 1.2rem;\n                text-align: center;\n                max-width: 800px;\n                margin: 0 auto 4rem;\n                color: #cccccc;\n            }\n            \n            /* About Section */\n            .about-section {\n                background: var(--color-dark-gray);\n            }\n            \n            .about-content {\n                display: grid;\n                grid-template-columns: 1fr 2fr;\n                gap: 4rem;\n                align-items: center;\n            }\n            \n            .about-logo img {\n                width: 100%;\n                max-width: 300px;\n                height: auto;\n            }\n            \n            .section-tagline {\n                font-family: var(--font-heading);\n                font-size: 2rem;\n                margin-bottom: 2rem;\n            }\n            \n            .about-description {\n                font-size: 1.1rem;\n                line-height: 1.8;\n                color: #cccccc;\n            }\n            \n            /* Features Section */\n            .features-section {\n                background: var(--color-dark);\n            }\n            \n            .features-grid {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n                gap: 3rem;\n            }\n            \n            .feature-card {\n                background: var(--color-dark-gray);\n                padding: 3rem 2rem;\n                border-radius: 12px;\n                text-align: center;\n                border: 1px solid transparent;\n                transition: all 0.3s ease;\n            }\n            \n            .feature-card:hover {\n                transform: translateY(-5px);\n            }\n            \n            .neon-border-cyan-magenta {\n                border-color: var(--color-cyan);\n                box-shadow: 0 0 20px var(--glow-cyan);\n            }\n            \n            .neon-border-orange-glow {\n                border-color: var(--color-orange);\n                box-shadow: 0 0 20px var(--glow-orange);\n            }\n            \n            .neon-border-purple-cyan {\n                border-color: var(--color-magenta);\n                box-shadow: 0 0 20px var(--glow-purple);\n            }\n            \n            .feature-icon {\n                width: 80px;\n                height: 80px;\n                margin: 0 auto 2rem;\n                border-radius: 50%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 2rem;\n            }\n            \n            .feature-title {\n                font-family: var(--font-heading);\n                font-size: 1.5rem;\n                margin-bottom: 1rem;\n                color: #ffffff;\n            }\n            \n            .feature-description {\n                color: #cccccc;\n                line-height: 1.6;\n            }\n            \n            /* Responsive Design */\n            @media (max-width: 768px) {\n                .hero-headline {\n                    font-size: 2.5rem;\n                }\n                \n                .hero-logos {\n                    gap: 2rem;\n                }\n                \n                .logo-left, .logo-right {\n                    height: 80px;\n                }\n                \n                .about-content {\n                    grid-template-columns: 1fr;\n                    text-align: center;\n                }\n                \n                .hero-ctas {\n                    flex-direction: column;\n                    align-items: center;\n                }\n                \n                .features-grid {\n                    grid-template-columns: 1fr;\n                }\n            }\n            \n            /* Animations */\n            @keyframes pulse {\n                0% { opacity: 1; }\n                50% { opacity: 0.8; }\n                100% { opacity: 1; }\n            }\n            \n            @keyframes circuit-flow {\n                0% { stroke-dashoffset: 0; }\n                100% { stroke-dashoffset: -50; }\n            }\n        ";
	}
	initializeInteractions() {
		this.initializeSmoothScrolling();
		this.initializeNeonAnimations();
		this.initializeScrollAnimations();
		this.initializeHoverEffects();
	}
	initializeSmoothScrolling() {
		let links = window.document.querySelectorAll("a[href^=\"#\"]");
		let _g = 0;
		let _g1 = links.length;
		while(_g < _g1) {
			let i = _g++;
			let link = js.Boot.__cast(links[i] , HTMLAnchorElement);
			link.addEventListener("click",function(e) {
				e.preventDefault();
				let targetId = link.getAttribute("href").substring(1);
				let targetElement = window.document.getElementById(targetId);
				if(targetElement != null) {
					targetElement.scrollIntoView({ behavior : "smooth", block : "start"});
				}
			});
		}
	}
	initializeNeonAnimations() {
		let heroHeadline = window.document.querySelector(".hero-headline");
		if(heroHeadline != null) {
			shared.AnimationUtils.createNeonPulse(heroHeadline,"#00FFFF",3.0,1.2);
		}
		let circuitPaths = window.document.querySelectorAll(".circuit-path");
		let _g = 0;
		let _g1 = circuitPaths.length;
		while(_g < _g1) {
			let i = _g++;
			shared.AnimationUtils.createCircuitFlow(circuitPaths[i],8.0 + i * 2);
		}
	}
	initializeScrollAnimations() {
		let featureCards = window.document.querySelectorAll(".feature-card");
		let _g = [];
		let _g1 = 0;
		let _g2 = featureCards.length;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(featureCards[i]);
		}
		shared.AnimationUtils.createStaggeredAnimation(_g,function(element) {
			shared.AnimationUtils.createScrollAnimation(element,function(el) {
				(js.Boot.__cast(el , HTMLElement)).style.opacity = "1";
				(js.Boot.__cast(el , HTMLElement)).style.transform = "translateY(0)";
			});
		},0.2);
	}
	initializeHoverEffects() {
		let ctaButtons = window.document.querySelectorAll(".cta-button");
		let _g = 0;
		let _g1 = ctaButtons.length;
		while(_g < _g1) {
			let i = _g++;
			let button = js.Boot.__cast(ctaButtons[i] , HTMLElement);
			if(button.classList.contains("primary-neon")) {
				shared.AnimationUtils.createHoverGlow(button,{ color : "#00FFFF", blur : 20.0, spread : 30.0, textBlur : 0.0},{ color : "#00FFFF", blur : 30.0, spread : 40.0, textBlur : 0.0});
			}
		}
		let logos = window.document.querySelectorAll(".logo-left, .logo-right");
		let _g2 = 0;
		let _g3 = logos.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let logo = js.Boot.__cast(logos[i] , HTMLElement);
			shared.AnimationUtils.createFloatingAnimation(logo,10.0,4.0);
		}
	}
	static main() {
		let app = new platform.js.TwistedBrainApp();
		app.initialize();
	}
}
platform.js.TwistedBrainApp.__name__ = true;
Object.assign(platform.js.TwistedBrainApp.prototype, {
	__class__: platform.js.TwistedBrainApp
});
var shared = {};
shared.AnimationUtils = class shared_AnimationUtils {
	static createNeonPulse(element,glowColor,duration,intensity) {
		if(intensity == null) {
			intensity = 1.0;
		}
		if(duration == null) {
			duration = 2.0;
		}
		let el = js.Boot.__cast(element , HTMLElement);
		let keyframes = [{ boxShadow : "0 0 " + 10 * intensity + "px " + glowColor + ", 0 0 " + 20 * intensity + "px " + glowColor + ", 0 0 " + 30 * intensity + "px " + glowColor, textShadow : "0 0 " + 5 * intensity + "px " + glowColor + ", 0 0 " + 10 * intensity + "px " + glowColor},{ boxShadow : "0 0 " + 20 * intensity + "px " + glowColor + ", 0 0 " + 30 * intensity + "px " + glowColor + ", 0 0 " + 40 * intensity + "px " + glowColor, textShadow : "0 0 " + 10 * intensity + "px " + glowColor + ", 0 0 " + 20 * intensity + "px " + glowColor}];
		let options = { duration : duration * 1000, iterations : Infinity, direction : "alternate", easing : "ease-in-out"};
		el.animate(keyframes,options);
	}
	static createCircuitFlow(element,duration,direction) {
		if(direction == null) {
			direction = "forward";
		}
		if(duration == null) {
			duration = 10.0;
		}
		if(element.style != null) {
			element.style.strokeDasharray = "20 10";
			element.style.strokeDashoffset = direction == "forward" ? "30" : "-30";
		} else {
			element.setAttribute("stroke-dasharray","20 10");
			element.setAttribute("stroke-dashoffset",direction == "forward" ? "30" : "-30");
		}
		let keyframes = [{ strokeDashoffset : direction == "forward" ? "30" : "-30"},{ strokeDashoffset : direction == "forward" ? "-30" : "30"}];
		let options = { duration : duration * 1000, iterations : Infinity, easing : "linear"};
		element.animate(keyframes,options);
	}
	static createTypewriterEffect(element,text,speed,onComplete) {
		if(speed == null) {
			speed = 50.0;
		}
		let el = js.Boot.__cast(element , HTMLElement);
		let currentIndex = 0;
		let intervalMs = Math.round(speed);
		el.textContent = "";
		let intervalId = 0;
		intervalId = window.setInterval(function() {
			if(currentIndex < text.length) {
				el.textContent += text.charAt(currentIndex);
				currentIndex += 1;
			} else {
				window.clearInterval(intervalId);
				if(onComplete != null) {
					onComplete();
				}
			}
		},intervalMs);
		return intervalId;
	}
	static createHoverGlow(element,baseGlow,hoverGlow) {
		let el = js.Boot.__cast(element , HTMLElement);
		shared.AnimationUtils.applyGlowEffect(el,baseGlow);
		el.addEventListener("mouseenter",function(e) {
			shared.AnimationUtils.animateGlowTransition(el,baseGlow,hoverGlow,0.3);
		});
		el.addEventListener("mouseleave",function(e) {
			shared.AnimationUtils.animateGlowTransition(el,hoverGlow,baseGlow,0.3);
		});
	}
	static applyGlowEffect(element,glow) {
		element.style.boxShadow = "0 0 " + glow.blur + "px " + glow.color + ", 0 0 " + glow.spread + "px " + glow.color;
		element.style.textShadow = "0 0 " + glow.textBlur + "px " + glow.color;
	}
	static animateGlowTransition(element,fromGlow,toGlow,duration) {
		let keyframes = [{ boxShadow : "0 0 " + fromGlow.blur + "px " + fromGlow.color + ", 0 0 " + fromGlow.spread + "px " + fromGlow.color, textShadow : "0 0 " + fromGlow.textBlur + "px " + fromGlow.color},{ boxShadow : "0 0 " + toGlow.blur + "px " + toGlow.color + ", 0 0 " + toGlow.spread + "px " + toGlow.color, textShadow : "0 0 " + toGlow.textBlur + "px " + toGlow.color}];
		let options = { duration : duration * 1000, fill : "forwards", easing : "ease-out"};
		element.animate(keyframes,options);
	}
	static createFloatingAnimation(element,amplitude,duration) {
		if(duration == null) {
			duration = 6.0;
		}
		if(amplitude == null) {
			amplitude = 20.0;
		}
		let el = js.Boot.__cast(element , HTMLElement);
		let keyframes = [{ transform : "translateY(0px)"},{ transform : "translateY(-" + amplitude + "px)"},{ transform : "translateY(0px)"},{ transform : "translateY(" + amplitude + "px)"},{ transform : "translateY(0px)"}];
		let options = { duration : duration * 1000, iterations : Infinity, easing : "ease-in-out"};
		el.animate(keyframes,options);
	}
	static createStaggeredAnimation(elements,animationFunction,staggerDelay) {
		if(staggerDelay == null) {
			staggerDelay = 0.1;
		}
		let _g = 0;
		let _g1 = elements.length;
		while(_g < _g1) {
			let i = _g++;
			let element = elements[i];
			let delay = i * staggerDelay * 1000;
			window.setTimeout(function() {
				animationFunction(element);
			},Math.round(delay));
		}
	}
	static createScrollAnimation(element,animationFunction,threshold) {
		if(threshold == null) {
			threshold = 0.3;
		}
		let el = js.Boot.__cast(element , HTMLElement);
		let observer = new IntersectionObserver(function(entries,observer) {
			let _g = 0;
			while(_g < entries.length) {
				let entry = entries[_g];
				++_g;
				if(entry.isIntersecting) {
					animationFunction(entry.target);
					observer.unobserve(entry.target);
				}
			}
		},{ threshold : threshold});
		observer.observe(el);
	}
}
shared.AnimationUtils.__name__ = true;
shared.GlowPresets = class shared_GlowPresets {
}
shared.GlowPresets.__name__ = true;
shared.AssetManager = class shared_AssetManager {
	constructor() {
		this.loadedAssets = new haxe.ds.StringMap();
		this.assetCache = new haxe.ds.StringMap();
	}
	preloadAssets(assetPaths,onComplete,onProgress) {
		let totalAssets = assetPaths.length;
		let loadedCount = 0;
		if(totalAssets == 0) {
			onComplete();
			return;
		}
		let _g = 0;
		while(_g < assetPaths.length) {
			let assetPath = assetPaths[_g];
			++_g;
			this.loadAsset(assetPath,function(success) {
				loadedCount += 1;
				if(onProgress != null) {
					onProgress(loadedCount,totalAssets);
				}
				if(loadedCount >= totalAssets) {
					onComplete();
				}
			});
		}
	}
	loadAsset(assetPath,onComplete) {
		if(Object.prototype.hasOwnProperty.call(this.loadedAssets.h,assetPath)) {
			onComplete(true);
			return;
		}
		let extension = this.getFileExtension(assetPath).toLowerCase();
		switch(extension) {
		case "css":
			this.loadStyleAsset(assetPath,onComplete);
			break;
		case "otf":case "ttf":case "woff":case "woff2":
			this.loadFontAsset(assetPath,onComplete);
			break;
		case "gif":case "jpeg":case "jpg":case "png":case "svg":
			this.loadImageAsset(assetPath,onComplete);
			break;
		default:
			this.loadGenericAsset(assetPath,onComplete);
		}
	}
	loadImageAsset(assetPath,onComplete) {
		let img = window.document.createElement("img");
		let _gthis = this;
		img.onload = function() {
			_gthis.loadedAssets.h[assetPath] = true;
			_gthis.assetCache.h[assetPath] = img;
			onComplete(true);
		};
		img.onerror = function() {
			console.log("shared/AssetManager.hx:108:","Failed to load image: " + assetPath);
			onComplete(false);
		};
		img.src = assetPath;
	}
	loadFontAsset(assetPath,onComplete) {
		let link = window.document.createElement("link");
		link.rel = "preload";
		link.href = assetPath;
		link.setAttribute("as","font");
		link.setAttribute("type","font/woff2");
		link.setAttribute("crossorigin","anonymous");
		let _gthis = this;
		link.onload = function() {
			_gthis.loadedAssets.h[assetPath] = true;
			onComplete(true);
		};
		link.onerror = function() {
			console.log("shared/AssetManager.hx:136:","Failed to load font: " + assetPath);
			onComplete(false);
		};
		window.document.head.appendChild(link);
	}
	loadStyleAsset(assetPath,onComplete) {
		let link = window.document.createElement("link");
		link.rel = "stylesheet";
		link.href = assetPath;
		let _gthis = this;
		link.onload = function() {
			_gthis.loadedAssets.h[assetPath] = true;
			onComplete(true);
		};
		link.onerror = function() {
			console.log("shared/AssetManager.hx:161:","Failed to load stylesheet: " + assetPath);
			onComplete(false);
		};
		window.document.head.appendChild(link);
	}
	loadGenericAsset(assetPath,onComplete) {
		this.loadedAssets.h[assetPath] = true;
		onComplete(true);
	}
	getCachedAsset(assetPath) {
		return this.assetCache.h[assetPath];
	}
	isAssetLoaded(assetPath) {
		if(Object.prototype.hasOwnProperty.call(this.loadedAssets.h,assetPath)) {
			return this.loadedAssets.h[assetPath];
		} else {
			return false;
		}
	}
	getFileExtension(path) {
		let lastDot = path.lastIndexOf(".");
		if(lastDot == -1) {
			return "";
		}
		return path.substring(lastDot + 1);
	}
	clearCache() {
		this.loadedAssets.h = Object.create(null);
		this.assetCache.h = Object.create(null);
	}
	getLoadingStats() {
		let totalAssets = 0;
		let loadedAssets = 0;
		let h = this.loadedAssets.h;
		let path_keys = Object.keys(h);
		let path_length = path_keys.length;
		let path_current = 0;
		while(path_current < path_length) {
			let path = path_keys[path_current++];
			++totalAssets;
			if(this.loadedAssets.h[path]) {
				++loadedAssets;
			}
		}
		let tmp = totalAssets > 0 ? loadedAssets / totalAssets * 100 : 100;
		let _g = [];
		let h1 = this.assetCache.h;
		let key_keys = Object.keys(h1);
		let key_length = key_keys.length;
		let key_current = 0;
		while(key_current < key_length) {
			let key = key_keys[key_current++];
			_g.push(key);
		}
		return { totalAssets : totalAssets, loadedAssets : loadedAssets, loadingProgress : tmp, cacheSize : _g.length};
	}
	static getInstance() {
		if(shared.AssetManager.instance == null) {
			shared.AssetManager.instance = new shared.AssetManager();
		}
		return shared.AssetManager.instance;
	}
}
shared.AssetManager.__name__ = true;
Object.assign(shared.AssetManager.prototype, {
	__class__: shared.AssetManager
});
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
{
	Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
	String.__name__ = true;
	Array.__name__ = true;
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js.Boot.__toStr = ({ }).toString;
shared.GlowPresets.CYAN_GLOW = { color : "#00FFFF", blur : 15.0, spread : 25.0, textBlur : 8.0};
shared.GlowPresets.MAGENTA_GLOW = { color : "#FF00FF", blur : 15.0, spread : 25.0, textBlur : 8.0};
shared.GlowPresets.ORANGE_GLOW = { color : "#FF8C00", blur : 15.0, spread : 25.0, textBlur : 8.0};
shared.GlowPresets.SUBTLE_CYAN = { color : "#00FFFF", blur : 8.0, spread : 12.0, textBlur : 4.0};
shared.GlowPresets.INTENSE_MAGENTA = { color : "#FF00FF", blur : 25.0, spread : 35.0, textBlur : 15.0};
platform.js.TwistedBrainApp.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=app.js.map